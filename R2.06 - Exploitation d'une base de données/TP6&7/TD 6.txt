--1
select * 
from client
where numclient 
not in (select numclient
		from participation);

select *
from client c
where not exists (
					select 'X'
					from participation p
					where c.numclient = p.numclient
					);
					
--2
delete from client c where numclient>=1050 and not exists (
					select 'X'
					from participation p
					where c.numclient = p.numclient
					);

--3
select * 
from itineraire
where numitineraire 
not in (select numitineraire
		from itinerairesortie);

select *
from itineraire i
where not exists (
					select 'X'
					from itinerairesortie iso
					where i.numitineraire = iso.numitineraire
					);
					
--4
delete from itineraire i where numitineraire > 100 and not exists (
					select 'X'
					from itinerairesortie iso
					where i.numitineraire = iso.numitineraire
					);

--5

select numclient,nom,prenom from client c
WHERE NOT EXISTS (
					SELECT 'X'
					FROM sortie s
					WHERE NOT EXISTS (
										SELECT 'X'
										FROM participation p
										WHERE p.numclient = c.numclient
										AND p.numsortie = s.numsortie
					)
										);

select p.numclient,nom,prenom from client c
join participation p
on c.numclient = p.numclient
group by (p.numclient,nom,prenom)
having count(p.numclient) = (select count(*) from sortie);


SELECT C.numclient, S.numsortie FROM Client C
CROSS JOIN Sortie S
where numclient = 10;

insert into participation
SELECT C.numclient, S.numsortie FROM Client C
CROSS JOIN Sortie S
where numclient = 10;

--6
select * from sortie s
WHERE NOT EXISTS (
					SELECT 'X'
					FROM client c
					WHERE NOT EXISTS (
										SELECT 'X'
										FROM participation p
										WHERE p.numclient = c.numclient
										AND p.numsortie = s.numsortie
					)
										);

select s.numsortie from sortie s
join participation p
on s.numsortie = p.numsortie
group by (s.numsortie)
having count(s.numsortie) = (select count(*) from client);

insert into sortie values ((select MAX(numsortie) from sortie)+1,1,NOW());

insert into participation (SELECT c.numclient,S.numsortie FROM sortie s
CROSS JOIN client c
where numsortie = 259);

delete from participation
where numsortie = (select max(numsortie) from sortie);

delete from sortie
where numsortie = (select max(numsortie) from sortie);




--7
select p.numclient, nom, prenom
from participation p
join client c 
on p.numclient = c.numclient 
group by p.numclient,nom,prenom
having count(numsortie) >= all(select count(numsortie) 
								from participation
								group by numclient);

--8
select i.numsortie, datesortie, meteo, sum(dureeitineraire) "durÃ©e"
from itinerairesortie i
join sortie s on s.numsortie = i.numsortie
join conditionsmeteo m on s.idmeteo = m.idmeteo
group by i.numsortie, datesortie, meteo
having sum(dureeitineraire) >= all(select sum(dureeitineraire)
								from itinerairesortie i
								join sortie s on s.numsortie = i.numsortie
								group by i.numsortie);

--9
select numsommet, i.numitineraire, titreitineraire, avg(dureeitineraire)
from itineraire i
left join itinerairesortie itso
on itso.numitineraire = i.numitineraire
group by numsommet, i.numitineraire, titreitineraire
order by numsommet, numitineraire;

--10
drop view if exists vuedemalade;
CREATE VIEW vuedemalade ("numsommet", "nomsommet","numitineraire","titreitineraire","derniere sortie") AS
SELECT i.numsommet, nomsommet, i.numitineraire, titreitineraire, max(datesortie)
FROM itineraire i
left join itinerairesortie itso
on itso.numitineraire = i.numitineraire
left join sortie s
on s.numsortie = itso.numsortie
join sommet so
on so.numsommet = i.numsommet
group by i.numsommet, nomsommet, i.numitineraire, titreitineraire
order by numsommet,numitineraire;
select * from vuedemalade;

--11
select s.numsortie, datesortie, meteo, avg(note)
from sortie s
join participation p
on p.numsortie = s.numsortie
join conditionsmeteo cm
on cm.idmeteo = s.idmeteo
where to_char(datesortie,'YYYY') = to_char(current_date,'YYYY')
group by s.numsortie, datesortie, meteo
order by avg(note) desc;

--12
select s.numsortie, datesortie, meteo, avg(note), rank() over(order by avg(note) desc)"classement", ntile(4) over (order by avg(note) desc)"Quartile"
from sortie s
join participation p
on p.numsortie = s.numsortie
join conditionsmeteo cm
on cm.idmeteo = s.idmeteo
where to_char(datesortie,'YYYY') = to_char(current_date,'YYYY')
group by s.numsortie, datesortie, meteo
order by avg(note) desc;

--13
drop table if exists temptable;

create temp table temptable as
select s.numsortie, datesortie, meteo, avg(note), rank() over(order by avg(note) desc)"classement", ntile(4) over (order by avg(note) desc)"Quartile" 
from sortie s
join participation p
on p.numsortie = s.numsortie
join conditionsmeteo cm
on cm.idmeteo = s.idmeteo
where to_char(datesortie,'YYYY') = to_char(current_date,'YYYY')
group by s.numsortie, datesortie, meteo
order by avg(note) desc
LIMIT 10;

select * from temptable;


select t.numsortie,t.datesortie,t.meteo,t.note,t.classement,t.quartile from(
select s.numsortie, datesortie, meteo, avg(note)"note", rank() over(order by avg(note) desc)"classement", ntile(4) over (order by avg(note) desc)"quartile"
from sortie s
join participation p
on p.numsortie = s.numsortie
join conditionsmeteo cm
on cm.idmeteo = s.idmeteo
where to_char(datesortie,'YYYY') = to_char(current_date,'YYYY')
group by s.numsortie, datesortie, meteo
order by avg(note) desc)
as t
LIMIT 10;

--14
drop view if exists sacreevue;

CREATE VIEW sacreevue ("numsortie","date","meteo","note","classement","quartile") as
select s.numsortie, datesortie, meteo, round(avg(note),2), rank() over(order by avg(note) desc)"classement", ntile(4) over (order by avg(note) desc)"Quartile"
from sortie s
join participation p
on p.numsortie = s.numsortie
join conditionsmeteo cm
on cm.idmeteo = s.idmeteo
where to_char(datesortie,'YYYY') = to_char(current_date,'YYYY')
group by s.numsortie, datesortie, meteo
order by avg(note) desc
LIMIT 10;

select * from sacreevue;

--15
select to_char(datesortie,'YYYY'),max(note) 
from sortie s
join participation p
on p.numsortie = s.numsortie
group by to_char(datesortie,'YYYY')
order by to_char(datesortie,'YYYY') desc;